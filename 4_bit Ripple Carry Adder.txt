4 â€“ bit Ripple Carry Adder:
Design Code:

module full_adder(a,b,cin,sum,cout);
  input a, b, cin;
  output sum, cout;
    assign sum = a^b^cin;
    assign cout = (a & b) | (b & cin) | (a & cin);
endmodule
module ripple_carry(a,b,cin,sum,cout);
  input  [3:0]a,b;
    input  cin;
  output [3:0]sum;
    output cout;
    wire c1, c2, c3;
    full_adder fa0(a[0]), b[0], cin,  sum[0], c1);
    full_adder fa1(a[1], b[1], c1, sum[1], c2);
    full_adder fa2(a[2], b[2], c2, sum[2], c3);
    full_adder fa3(a[3], b[3], c3,sum[3], cout);
endmodule

Test Bench:
interface inter;
  logic [3:0]a,b;
   logic cin;
  logic [3:0]sum;
   logic cout;
endinterface

class generator;
    mailbox mbx;
    task run();
      for (int i = 0; i < 4; i++) begin
          bit [3:0] a= $urandom_range(0, 15);
          bit [3:0] b  = $urandom_range(0, 15);
          bit cin = $urandom_range(0, 1);
          mbx.put({a, b, cin});
          $display("a=%0d b=%0d cin=%0b", a, b, cin);
        end
    endtask
endclass

class driver;
    mailbox mbx;
    virtual inter vif;
    task run();
        forever begin
            bit [8:0] temp; 
            mbx.get(temp);
            vif.a  = temp[8:5]; 
            vif.b  = temp[4:1]; 
            vif.cin = temp[0];   
            #10;
          $display("a=%0d b=%0d cin=%0b -> sum=%0d cout=%0b",
                      vif.a, vif.b, vif.cin, vif.sum, vif.cout);
        end
    endtask
endclass

module tb;
    inter aif();
    ripple_carry dut (.a(aif.a), .b(aif.b), .cin(aif.cin),.sum(aif.sum), .cout(aif.cout));
    generator gen;
    driver drv;
    mailbox mbx;
    initial begin
        gen = new();
        drv = new();
        mbx = new();
        gen.mbx = mbx;
        drv.mbx = mbx;
        drv.vif = aif;
        fork
            gen.run();
            drv.run();
        join
    end
    initial begin
      $dumpfile("dump.vcd");
        $dumpvars;
    end
endmodule

Output:
# KERNEL: a=15 b=6 cin=1
# KERNEL: a=15 b=6 cin=1 -> sum=6 cout=1
# KERNEL: a=12 b=15 cin=1
# KERNEL: a=12 b=15 cin=1 -> sum=12 cout=1
# KERNEL: a=11 b=13 cin=0
# KERNEL: a=11 b=13 cin=0 -> sum=8 cout=1
# KERNEL: a=15 b=15 cin=1
# KERNEL: a=15 b=15 cin=1 -> sum=15 cout=1
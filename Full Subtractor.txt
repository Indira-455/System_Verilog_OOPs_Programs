Full Subtractor:
Design Code:

module fs(a,b,c,diff,borrow);
  input a,b,c;
  output diff,borrow;
  assign diff = a ^ b ^ c;
  assign borrow = (~a & b) | (b & c) | (c & ~a);
endmodule

Test Bench:
interface inter;
  logic a;
  logic b;
  logic c;
  logic diff;
  logic borrow;
endinterface

class generator;
  mailbox mbx;
  task run();
    for(int i=0; i<8; i++) begin
      bit a=i[2];//MSB
      bit b=i[1];
      bit c=i[0];//LSB
      mbx.put({a,b,c});
      $display("generator test cases:a=%0b,b=%0b,c=%0b",a,b,c);
    end
  endtask
endclass

//driver
class driver;
  mailbox mbx;
  virtual inter vif;
  task run();
   forever begin
      bit [2:0]temp;
      bit a,b,c;
     mbx.get(temp);
    vif.a=temp[2];
    vif.b=temp[1];
    vif.c=temp[0];
    #10;
     $display("Driver applied values: a=%0b,b=%0b,c=%0b -> Output diff=%0b,borrow=%0b",a,b,c,vif.diff,vif.borrow);
    end
  endtask
endclass

module tb;
  inter fsif();
  fs dut (.a(fsif.a),.b(fsif.b),.c(fsif.c),.diff(fsif.diff),.borrow(fsif.borrow));
  generator gen;
  driver div;
  mailbox mbx;
  initial begin
    gen = new();
    div = new();
    mbx = new();
    gen.mbx=mbx;
    div.mbx=mbx;
    div.vif=fsif;
    fork
      gen.run();
      div.run();
    join
  end
  initial begin
    $dumpfile("dump.vcd");
    $dumpvars;
  end
endmodule

Output:
# KERNEL: generator test cases:a=0,b=0,c=0
# KERNEL: generator test cases:a=0,b=0,c=1
# KERNEL: generator test cases:a=0,b=1,c=0
# KERNEL: generator test cases:a=0,b=1,c=1
# KERNEL: generator test cases:a=1,b=0,c=0
# KERNEL: generator test cases:a=1,b=0,c=1
# KERNEL: generator test cases:a=1,b=1,c=0
# KERNEL: generator test cases:a=1,b=1,c=1
# KERNEL: Driver applied values: a=0,b=0,c=0 -> Output diff=0,borrow=0
# KERNEL: Driver applied values: a=0,b=0,c=1 -> Output diff=1,borrow=1
# KERNEL: Driver applied values: a=0,b=1,c=0 -> Output diff=1,borrow=1
# KERNEL: Driver applied values: a=0,b=1,c=1 -> Output diff=0,borrow=1
# KERNEL: Driver applied values: a=1,b=0,c=0 -> Output diff=1,borrow=0
# KERNEL: Driver applied values: a=1,b=0,c=1 -> Output diff=0,borrow=0
# KERNEL: Driver applied values: a=1,b=1,c=0 -> Output diff=0,borrow=0
# KERNEL: Driver applied values: a=1,b=1,c=1 -> Output diff=1,borrow=1
